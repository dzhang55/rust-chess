var searchIndex = {};
searchIndex['chess'] = {"items":[[0,"","chess","",null,null],[5,"main","","",null,{"inputs":[],"output":null}],[0,"webpage","","",null,null],[5,"req_handler","chess::webpage","",null,{"inputs":[{"name":"request"},{"name":"response"}],"output":null}],[5,"serve","","",null,{"inputs":[],"output":null}],[17,"HTTP_ADDR","","",null,null],[17,"HTML_DATA","","",null,null],[0,"chess_server","chess","A module for the server logic of Chess. Handles all WebSocket clients using\na relay MPSC channel. Sends information about game logic through Actions.",null,null],[3,"Payload","chess::chess_server","",null,null],[12,"variant","","",0,null],[12,"fields","","",0,null],[4,"Action","","Represents a single, atomic action taken by a client.",null,null],[13,"Connect","","",1,null],[12,"addr","chess::chess_server::Action","",1,null],[13,"Disconnect","chess::chess_server","",1,null],[12,"addr","chess::chess_server::Action","",1,null],[13,"Select","chess::chess_server","",1,null],[12,"cell","chess::chess_server::Action","",1,null],[13,"Move","chess::chess_server","",1,null],[12,"cell","chess::chess_server::Action","",1,null],[13,"Msg","chess::chess_server","",1,null],[12,"user","chess::chess_server::Action","",1,null],[12,"text","","",1,null],[5,"start","chess::chess_server","Spawn a WebSocket listener thread.",null,{"inputs":[],"output":null}],[5,"listen","","Create the relay MPSC (multi-producer/single-consumer) channel, spawn the\nrelay thread, then listen for WebSocket clients and spawn their threads.",null,{"inputs":[],"output":null}],[5,"relay_thread","","The relay thread handles all `Action`s received on its MPSC channel\nby sending them out to all of the currently connected clients.",null,{"inputs":[{"name":"arc"},{"name":"receiver"}],"output":null}],[5,"client_thread","","Each client thread waits for input (or disconnects) from its respective clients\nand relays the appropriate messages via the relay MPSC channel.",null,{"inputs":[{"name":"string"},{"name":"sender"},{"name":"receiver"}],"output":null}],[17,"WS_ADDR","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"action"}],"output":{"name":"action"}}],[11,"fmt","","",1,{"inputs":[{"name":"action"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"action"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"action"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"payload"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"payload"},{"name":"__d"}],"output":{"name":"result"}}],[0,"board","chess","A module for the game logic of Chess. Stores the Board object and contains\nmethods for finding potential moves, check/checkmate, etc.",null,null],[3,"Cell","chess::board","Represents the index of a single cell in the board.",null,null],[12,"row","","",2,null],[12,"column","","",2,null],[3,"Board","","Represents all the pieces in the board.",null,null],[12,"board","","",3,null],[4,"Piece","","Represents the possible types of pieces in a given cell.",null,null],[13,"Bishop","","",4,null],[13,"King","","",4,null],[13,"Knight","","",4,null],[13,"Pawn","","",4,null],[13,"Rook","","",4,null],[13,"Queen","","",4,null],[13,"None","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"fmt","","",2,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"cell"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"cell"},{"name":"__d"}],"output":{"name":"result"}}],[11,"init","","Initialize the board with starting positions.",3,{"inputs":[{"name":"board"}],"output":null}],[11,"get_piece","","Get the piece associated with a given cell index.",3,{"inputs":[{"name":"board"},{"name":"cell"}],"output":{"name":"piece"}}],[11,"potential_moves","","Calculate the potential moves for a given cell index.",3,{"inputs":[{"name":"board"},{"name":"cell"}],"output":{"name":"vec"}}]],"paths":[[3,"Payload"],[4,"Action"],[3,"Cell"],[3,"Board"],[4,"Piece"]]};
initSearch(searchIndex);
